---
# This Playbook Checks Ping Result of Node
- hosts: all
  gather_facts: true
  gather_subset: "!all"
  ignore_errors: true
  ignore_unreachable: true
  tasks:
    - name: Set facts
      set_fact:
        host_reachable: false
        host_exist: true
        ping_module: "{{ (ansible_facts['os_family'] != 'Windows') | ternary('ping', 'win_ping') }}"
        shell_module: "{{ (ansible_facts['os_family'] != 'Windows') | ternary('shell', 'win_shell') }}"
        method: "{{ (ansible_facts['os_family'] != 'Windows') | ternary('sudo', 'runas') }}"
        isadmin: >-
          $u=whoami;$wid=[System.Security.Principal.WindowsIdentity]::GetCurrent();
          $prp=new-object System.Security.Principal.WindowsPrincipal($wid);
          $adm=[System.Security.Principal.WindowsBuiltInRole]::Administrator;
          $IsAdmin=$prp.IsInRole($adm);if($isadmin){write-host "Administrator";}else{write-host $u;}
      ignore_errors: true

    - name: Validate connection and credentials
      action: >-
        {{ ping_module }}
      register: ping_result
      ignore_errors: true
      ignore_unreachable: true

    - name: Check raw module
      raw: hostname;whoami;
      changed_when: false
      register: raw_result
      ignore_errors: true
      ignore_unreachable: true

    - name: Check Privilege
      raw: "{{ (ansible_facts['os_family'] != 'Windows') | ternary('whoami', isadmin) }}"
      become: "{{ (ansible_facts['os_family'] != 'Windows') | ternary('yes', 'no') }}"
      changed_when: false
      register: priv_result
      ignore_errors: true

    - name: Check Setup
      setup:
        gather_subset: "{{ (ansible_facts['os_family'] != 'Windows') | ternary('!all,!min,python', '!all,!hardware,!network,!virtual,!ohai,!facter') }}"
      changed_when: false
      register: setup_result
      ignore_errors: true

    - name: set output fact
      set_fact:
        op: >-
          {{ item }} , {{ hostvars[item].group_names }} , {{ hostvars[item].ansible_facts.os_family | default('NULL') }} , 
          {{ hostvars[item].raw_result.stdout | default('NULL') }} , {{ hostvars[item].priv_result.stdout | default('NULL') }} , 
          {% if hostvars[item].ansible_facts.os_family != 'Windows' %} 
          Python {{ hostvars[item].setup_result.ansible_facts.ansible_python.version_info | default('NULL') }}
          {% else %} Powershell {{ hostvars[item].setup_result.ansible_facts.ansible_powershell_version | default('NULL') }} {% endif %}
      ignore_errors: true

    - name: Touch Report.csv
      file:
        state: touch
        path: /tmp/pingreport.csv
        mode: '0755'
      delegate_to: localhost
      run_once: true
      ignore_errors: true

    - name: Update Report.csv
      lineinfile: 
        path: /tmp/pingreport.csv
        line: "{{ op | replace('\r\n','')}}"
        insertafter: EOF
      with_inventory_hostnames: "{{ ansible_limit }}"
      run_once: true
      delegate_to: localhost
      ignore_errors: true

    - name: Print Report.csv
      shell: cat /tmp/pingreport.csv;
      changed_when: false
      run_once: true
      delegate_to: localhost
      ignore_errors: true

    - name: Set facts for event acknowledgement
      set_fact:
        slack_token: "{{ lookup('env','s_token') }}"
      run_once: true
      delegate_to: localhost
      ignore_errors: true

    - name: Send message to slack
      slack:
        token: "{{ slack_token }}"
        attachments:
          - text: >- 
              {{ item }} , {{ hostvars[item].group_names }} , {{ hostvars[item].ansible_facts.os_family | default('NULL') }} , 
              {{ hostvars[item].raw_result.stdout | default('NULL') }} , {{ hostvars[item].priv_result.stdout | default('NULL') }} , 
              {% if hostvars[item].ansible_facts.os_family != 'Windows' %} 
              Python {{ hostvars[item].setup_result.ansible_facts.ansible_python.version_info | default('NULL') }}
              {% else %} Powershell {{ hostvars[item].setup_result.ansible_facts.ansible_powershell_version | default('NULL') }} {% endif %} 
            title: Launched {{ tower_job_id }}
        channel: "automation"
        domain: "app.slack.com"
      run_once: true
      delegate_to: localhost
      ignore_errors: true

    - debug: 
        msg: >-
          {{ item }} , {{ hostvars[item].group_names }} , {{ hostvars[item].ansible_facts.os_family | default('NULL') }} , 
          {{ hostvars[item].raw_result.stdout | default('NULL') }} , {{ hostvars[item].priv_result.stdout | default('NULL') }} , 
          {% if hostvars[item].ansible_facts.os_family != 'Windows' %} 
          Python {{ hostvars[item].setup_result.ansible_facts.ansible_python.version_info | default('NULL') }}
          {% else %} Powershell {{ hostvars[item].setup_result.ansible_facts.ansible_powershell_version | default('NULL') }} {% endif %} 
      with_inventory_hostnames: "{{ ansible_limit }}"
      run_once: true
      ignore_errors: true
#    - debug: var=group_names
#      ignore_errors: true
              
