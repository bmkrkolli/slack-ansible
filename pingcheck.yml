---
# This Playbook Checks Ping Result of Node
- hosts: all
  gather_facts: true
  gather_subset: "!all"
  ignore_errors: true
  ignore_unreachable: true
  tasks:
    - name: Set facts
      set_fact:
        host_reachable: false
        host_exist: true
        ping_module: "{{ (ansible_facts['os_family'] != 'Windows') | ternary('ping', 'win_ping') }}"
        shell_module: "{{ (ansible_facts['os_family'] != 'Windows') | ternary('shell', 'win_shell') }}"
        method: "{{ (ansible_facts['os_family'] != 'Windows') | ternary('sudo', 'runas') }}"
        isadmin: >-
          $u=whoami;$wid=[System.Security.Principal.WindowsIdentity]::GetCurrent();
          $prp=new-object System.Security.Principal.WindowsPrincipal($wid);
          $adm=[System.Security.Principal.WindowsBuiltInRole]::Administrator;
          $IsAdmin=$prp.IsInRole($adm);if($isadmin){write-host "Administrator";}else{write-host $u;}
      ignore_errors: true

    - name: Validate connection and credentials
      action: >-
        {{ ping_module }}
      register: ping_result
      ignore_errors: true
      ignore_unreachable: true

    - name: Check raw module
      raw: hostname;whoami;
      changed_when: false
      register: raw_result
      ignore_errors: true
      ignore_unreachable: true

    - name: Check Privilege
      raw: "{{ (ansible_facts['os_family'] != 'Windows') | ternary('whoami', isadmin) }}"
      become: "{{ (ansible_facts['os_family'] != 'Windows') | ternary('yes', 'no') }}"
      changed_when: false
      register: priv_result
      ignore_errors: true

    - name: Check Setup
      setup:
        gather_subset: "{{ (ansible_facts['os_family'] != 'Windows') | ternary('!all,!min,python', '!all,!hardware,!network,!virtual,!ohai,!facter') }}"
      changed_when: false
      register: setup_result
      ignore_errors: true

    - name: Able to reach Node
      set_fact:
        host_reachable: true
        job_msg: >-
              "{{ ping_module }} > {{ hostvars['localhost']['host_ip'] }} is reachable"
      when: '"ping" in ping_result and ping_result.ping=="pong"'
      ignore_errors: true

    - name: Unable to Ping Node
      set_fact:
        host_reachable: false
        job_msg: >-
              "{{ ping_module }} > {{ hostvars['localhost']['host_ip'] }} is not reachable"
      when: '"unreachable" in ping_result and ping_result.unreachable'
      ignore_errors: true

    - name: Unable to reach Node(raw)
      set_fact:
        host_reachable: false
        job_msg: >-
              "{{ hostvars['localhost']['host_ip'] }} is not reachable. Error: {{ raw_result.msg }}"
      when: raw_result.unreachable
      ignore_errors: true

    - name: insert status into csv
      copy:
        content: "{{ raw_result.stdout | default('NULL') }} , {{ group_names }} , {{ ansible_facts['os_family'] }} , {{ priv_result.stdout | default('NULL') }} , {{ setup_result.stdout | default('NULL') }}"
        dest: /tmp/pingcheck.csv
      delegate_to: localhost
      ignore_errors: true

    - name: Set facts for event acknowledgement
      set_fact:
        slack_token: "{{ lookup('env','s_token') }}"
      run_once: true
      delegate_to: localhost
      ignore_errors: true

    - name: Send message to slack
      slack:
        token: "{{ slack_token }}"
        attachments:
          - text: >- 
              "{{ raw_result.stdout | default('NULL') }} , {{ group_names }} , {{ ansible_facts['os_family'] }} , {{ priv_result.stdout | default('NULL') }} , 
              {% if ansible_facts['os_family'] != 'Windows' %} python_version: {{ setup_result.ansible_facts.ansible_python.version_info }} 
              {% else %} powershell_version: {{ setup_result.ansible_facts.ansible_powershell_version }} {% endif %}"
            title: Launched {{ tower_job_id }}
        channel: "automation"
        domain: "app.slack.com"
      register: post_out
      delegate_to: localhost
      ignore_errors: true

    - debug: 
        msg: >-
          "{{ hostvars[{{ item }}][ansible_facts][os_family] }} , {{ group_names }} , 
          {% if ansible_facts['os_family'] != 'Windows' %} python_version: 
          {{ setup_result.ansible_facts.ansible_python.version_info }} , python_executable: 
          {{ setup_result.ansible_facts.ansible_python.executable }}
          {% else %} powershell_version: {{ setup_result.ansible_facts.ansible_powershell_version }} {% endif %} , {{ item }} "
      with_inventory_hostnames: "{{ ansible_limit }}"
      ignore_errors: true
#    - debug: var=group_names
#      ignore_errors: true
              
